{% comment %}
==============================================
INTELLIGENT STOREFRONT CLONER - A/B TESTING FRAMEWORK
==============================================
Advanced A/B testing system for Shopify themes.
Enables data-driven optimization and conversion testing.

Features:
- Client-side A/B testing
- Statistical significance tracking
- Conversion rate optimization
- Multi-variant testing
- Analytics integration
- Performance-aware testing
==============================================
{% endcomment %}

{% liquid
  comment 'A/B Testing Configuration'
  assign ab_testing_enabled = settings.enable_ab_testing | default: false
  assign ab_testing_debug = settings.debug_mode | default: false
  assign ab_testing_version = '1.0.0'
  assign traffic_allocation = 0.5
  assign confidence_threshold = 95
  assign minimum_sample_size = 100
%}

{% comment %} A/B Testing Core Script {% endcomment %}
<script>
  // A/B Testing Framework
  window.ABTestingFramework = {
    config: {
      enabled: {{ ab_testing_enabled }},
      debug: {{ ab_testing_debug }},
      version: '{{ ab_testing_version }}',
      trafficAllocation: {{ traffic_allocation }},
      confidenceThreshold: {{ confidence_threshold }},
      minimumSampleSize: {{ minimum_sample_size }},
      cookieExpiry: 30 // days
    },

    tests: {},
    userVariants: {},
    events: [],

    // Initialize A/B testing system
    init: function() {
      if (!this.config.enabled) return;

      this.loadUserVariants();
      this.setupEventTracking();
      this.processQueuedTests();
      
      if (this.config.debug) {
        this.enableDebugMode();
      }

      // Track page view for all active tests
      setTimeout(() => {
        this.trackPageView();
      }, 1000);
    },

    // Register a new A/B test
    registerTest: function(testConfig) {
      const test = {
        id: testConfig.id,
        name: testConfig.name || testConfig.id,
        variants: testConfig.variants || ['control', 'variant'],
        trafficAllocation: testConfig.trafficAllocation || this.config.trafficAllocation,
        targeting: testConfig.targeting || {},
        goals: testConfig.goals || ['conversion'],
        status: testConfig.status || 'active',
        startDate: testConfig.startDate || new Date().toISOString(),
        endDate: testConfig.endDate,
        metadata: testConfig.metadata || {}
      };

      // Validate test configuration
      if (!this.validateTest(test)) {
        console.error('‚ùå Invalid A/B test configuration:', test);
        return false;
      }

      this.tests[test.id] = test;

      // Assign user to variant if not already assigned
      if (!this.userVariants[test.id] && this.shouldIncludeUser(test)) {
        this.assignUserToVariant(test);
      }

      if (this.config.debug) {
        console.log('üß™ A/B Test registered:', test);
      }

      return test;
    },

    // Validate test configuration
    validateTest: function(test) {
      if (!test.id || !test.variants || test.variants.length < 2) {
        return false;
      }

      if (test.trafficAllocation < 0 || test.trafficAllocation > 1) {
        return false;
      }

      return true;
    },

    // Check if user should be included in test
    shouldIncludeUser: function(test) {
      // Check targeting criteria
      if (test.targeting.device) {
        const deviceType = this.getDeviceType();
        if (test.targeting.device !== deviceType) {
          return false;
        }
      }

      if (test.targeting.location) {
        const userCountry = this.getUserCountry();
        if (test.targeting.location !== userCountry) {
          return false;
        }
      }

      if (test.targeting.newVisitor !== undefined) {
        const isNewVisitor = this.isNewVisitor();
        if (test.targeting.newVisitor !== isNewVisitor) {
          return false;
        }
      }

      // Check traffic allocation
      const hash = this.hashUserId(test.id);
      return hash < test.trafficAllocation;
    },

    // Assign user to test variant
    assignUserToVariant: function(test) {
      const hash = this.hashUserId(test.id);
      const variantIndex = Math.floor(hash * test.variants.length);
      const variant = test.variants[variantIndex];

      this.userVariants[test.id] = {
        variant: variant,
        assignedAt: new Date().toISOString(),
        testName: test.name
      };

      this.saveUserVariants();
      
      // Track assignment
      this.trackEvent('test_assignment', {
        test_id: test.id,
        test_name: test.name,
        variant: variant,
        assignment_method: 'automatic'
      });

      if (this.config.debug) {
        console.log(`üéØ User assigned to variant "${variant}" for test "${test.name}"`);
      }

      return variant;
    },

    // Get user's variant for a test
    getVariant: function(testId) {
      if (!this.tests[testId] || !this.userVariants[testId]) {
        return null;
      }

      return this.userVariants[testId].variant;
    },

    // Check if user is in specific variant
    isVariant: function(testId, variantName) {
      const userVariant = this.getVariant(testId);
      return userVariant === variantName;
    },

    // Track conversion goal
    trackGoal: function(testId, goalName, value = 1) {
      if (!this.tests[testId] || !this.userVariants[testId]) {
        return;
      }

      const variant = this.userVariants[testId].variant;
      const test = this.tests[testId];

      // Check if goal is defined for this test
      if (!test.goals.includes(goalName)) {
        if (this.config.debug) {
          console.warn(`‚ö†Ô∏è Goal "${goalName}" not defined for test "${testId}"`);
        }
        return;
      }

      const goalData = {
        test_id: testId,
        test_name: test.name,
        variant: variant,
        goal: goalName,
        value: value,
        timestamp: new Date().toISOString(),
        url: window.location.href,
        user_agent: navigator.userAgent
      };

      // Track locally
      this.events.push({
        type: 'goal',
        data: goalData
      });

      // Track in analytics
      this.trackEvent('ab_goal_conversion', goalData);

      if (this.config.debug) {
        console.log('üéØ Goal tracked:', goalData);
      }

      // Send to analytics endpoint
      this.sendToAnalytics('goal', goalData);
    },

    // Track page view for active tests
    trackPageView: function() {
      Object.keys(this.userVariants).forEach(testId => {
        if (this.tests[testId] && this.tests[testId].status === 'active') {
          const variant = this.userVariants[testId].variant;
          
          this.trackEvent('ab_page_view', {
            test_id: testId,
            test_name: this.tests[testId].name,
            variant: variant,
            page: window.location.pathname
          });
        }
      });
    },

    // Hash user ID for consistent variant assignment
    hashUserId: function(testId) {
      const userId = this.getUserId();
      const string = userId + testId;
      let hash = 0;
      
      for (let i = 0; i < string.length; i++) {
        const char = string.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash; // Convert to 32-bit integer
      }
      
      return Math.abs(hash) / 2147483647; // Normalize to 0-1
    },

    // Get consistent user ID
    getUserId: function() {
      let userId = this.getCookie('ab_user_id');
      
      if (!userId) {
        userId = 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        this.setCookie('ab_user_id', userId, this.config.cookieExpiry);
      }
      
      return userId;
    },

    // Device type detection
    getDeviceType: function() {
      const width = window.innerWidth;
      if (width <= 767) return 'mobile';
      if (width <= 1023) return 'tablet';
      return 'desktop';
    },

    // Get user country (simplified)
    getUserCountry: function() {
      // This would typically use a geolocation service
      return 'US'; // Default fallback
    },

    // Check if user is new visitor
    isNewVisitor: function() {
      return !this.getCookie('returning_visitor');
    },

    // Load user variants from storage
    loadUserVariants: function() {
      try {
        const stored = localStorage.getItem('ab_user_variants');
        if (stored) {
          this.userVariants = JSON.parse(stored);
        }
      } catch (e) {
        console.warn('Failed to load A/B test variants from storage');
      }
    },

    // Save user variants to storage
    saveUserVariants: function() {
      try {
        localStorage.setItem('ab_user_variants', JSON.stringify(this.userVariants));
      } catch (e) {
        console.warn('Failed to save A/B test variants to storage');
      }
    },

    // Setup event tracking
    setupEventTracking: function() {
      // Track clicks on CTA buttons
      document.addEventListener('click', (event) => {
        const element = event.target.closest('[data-ab-goal]');
        if (element) {
          const testId = element.dataset.abTest;
          const goal = element.dataset.abGoal;
          
          if (testId && goal) {
            this.trackGoal(testId, goal);
          }
        }
      });

      // Track form submissions
      document.addEventListener('submit', (event) => {
        const form = event.target;
        const testId = form.dataset.abTest;
        const goal = form.dataset.abGoal || 'form_submission';
        
        if (testId) {
          this.trackGoal(testId, goal);
        }
      });

      // Track add to cart events
      document.addEventListener('product:added-to-cart', (event) => {
        Object.keys(this.userVariants).forEach(testId => {
          if (this.tests[testId] && this.tests[testId].goals.includes('add_to_cart')) {
            this.trackGoal(testId, 'add_to_cart', event.detail.value || 1);
          }
        });
      });
    },

    // Process queued tests
    processQueuedTests: function() {
      if (window.abTestQueue) {
        window.abTestQueue.forEach(testConfig => {
          this.registerTest(testConfig);
        });
        window.abTestQueue = [];
      }
    },

    // Track events to analytics
    trackEvent: function(eventName, properties) {
      // Google Analytics 4
      if (typeof gtag !== 'undefined') {
        gtag('event', eventName, {
          event_category: 'A/B Testing',
          ...properties
        });
      }

      // Shopify Analytics
      if (typeof analytics !== 'undefined' && analytics.track) {
        analytics.track(eventName, {
          category: 'A/B Testing',
          ...properties
        });
      }

      // Custom analytics endpoint
      if (this.config.analyticsEndpoint) {
        this.sendToAnalytics(eventName, properties);
      }
    },

    // Send data to analytics endpoint
    sendToAnalytics: function(eventType, data) {
      if (!this.config.analyticsEndpoint) return;

      fetch(this.config.analyticsEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          type: eventType,
          data: data,
          timestamp: new Date().toISOString()
        })
      }).catch(err => {
        if (this.config.debug) {
          console.warn('Failed to send A/B test data to analytics:', err);
        }
      });
    },

    // Cookie utilities
    setCookie: function(name, value, days) {
      const expires = new Date();
      expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));
      document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/`;
    },

    getCookie: function(name) {
      const nameEQ = name + "=";
      const ca = document.cookie.split(';');
      
      for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
      }
      
      return null;
    },

    // Enable debug mode
    enableDebugMode: function() {
      // Create debug panel
      const debugPanel = document.createElement('div');
      debugPanel.id = 'ab-testing-debug';
      debugPanel.innerHTML = `
        <div style="position: fixed; top: 120px; right: 10px; background: #2563eb; color: white; padding: 1rem; border-radius: 8px; font-family: monospace; font-size: 12px; z-index: 9999; min-width: 250px;">
          <strong>üß™ A/B Testing Debug</strong><br><br>
          <div id="active-tests">Loading tests...</div><br>
          <div style="font-size: 10px; opacity: 0.8;">Framework v${this.config.version}</div>
        </div>
      `;
      document.body.appendChild(debugPanel);

      // Update debug info
      setTimeout(() => {
        this.updateDebugPanel();
      }, 1000);

      // Log debug info
      console.group('üß™ A/B Testing Debug');
      console.log('Active Tests:', this.tests);
      console.log('User Variants:', this.userVariants);
      console.log('Configuration:', this.config);
      console.groupEnd();
    },

    // Update debug panel
    updateDebugPanel: function() {
      const testsEl = document.getElementById('active-tests');
      if (!testsEl) return;

      let html = '';
      Object.keys(this.tests).forEach(testId => {
        const test = this.tests[testId];
        const userVariant = this.userVariants[testId];
        
        html += `<div style="margin-bottom: 8px;">
          <strong>${test.name}</strong><br>
          Variant: ${userVariant ? userVariant.variant : 'Not assigned'}<br>
          Status: ${test.status}
        </div>`;
      });

      if (html === '') {
        html = 'No active tests';
      }

      testsEl.innerHTML = html;
    },

    // Get test results summary
    getResults: function(testId) {
      if (!this.tests[testId]) {
        return null;
      }

      // This would typically fetch results from analytics
      return {
        testId: testId,
        testName: this.tests[testId].name,
        status: this.tests[testId].status,
        variants: this.tests[testId].variants,
        // Results would be populated from analytics data
        results: {
          // Example structure
          // control: { visitors: 1000, conversions: 50 },
          // variant: { visitors: 1000, conversions: 65 }
        }
      };
    }
  };

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      ABTestingFramework.init();
    });
  } else {
    ABTestingFramework.init();
  }

  // Global helper functions
  window.abTest = {
    register: (config) => ABTestingFramework.registerTest(config),
    getVariant: (testId) => ABTestingFramework.getVariant(testId),
    isVariant: (testId, variant) => ABTestingFramework.isVariant(testId, variant),
    trackGoal: (testId, goal, value) => ABTestingFramework.trackGoal(testId, goal, value)
  };

  // Queue for tests registered before framework loads
  window.abTestQueue = window.abTestQueue || [];

  {% if ab_testing_debug %}
    console.log('üß™ A/B Testing Framework Loaded');
    console.log('‚öôÔ∏è Configuration:', ABTestingFramework.config);
  {% endif %}
</script>

{% comment %} A/B Testing CSS {% endcomment %}
<style>
  /* A/B Testing utility classes */
  .ab-test-variant {
    display: var(--ab-display, block);
  }

  .ab-test-hidden {
    display: none !important;
  }

  /* Performance optimization for A/B tests */
  .ab-test-loading {
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .ab-test-ready {
    opacity: 1;
  }

  /* Debug styles */
  {% if ab_testing_debug %}
    .ab-test-debug {
      position: relative;
    }

    .ab-test-debug::before {
      content: attr(data-ab-variant);
      position: absolute;
      top: 0;
      left: 0;
      background: #2563eb;
      color: white;
      padding: 2px 6px;
      font-size: 10px;
      font-family: monospace;
      z-index: 1000;
    }
  {% endif %}
</style>

{% comment %} Sample A/B Test Registration {% endcomment %}
<script>
  // Example: Hero section A/B test
  {% if template == 'index' %}
    window.abTestQueue = window.abTestQueue || [];
    window.abTestQueue.push({
      id: 'hero_cta_test',
      name: 'Hero CTA Button Test',
      variants: ['control', 'variant_a', 'variant_b'],
      trafficAllocation: 0.5,
      goals: ['click_cta', 'add_to_cart', 'purchase'],
      targeting: {
        newVisitor: true
      },
      metadata: {
        description: 'Testing different CTA button texts and colors',
        hypothesis: 'Variant buttons will increase click-through rate'
      }
    });
  {% endif %}

  // Example: Product page A/B test
  {% if template contains 'product' %}
    window.abTestQueue = window.abTestQueue || [];
    window.abTestQueue.push({
      id: 'product_price_display',
      name: 'Product Price Display Test',
      variants: ['control', 'strikethrough', 'highlighted'],
      trafficAllocation: 0.3,
      goals: ['add_to_cart', 'purchase'],
      metadata: {
        description: 'Testing different price display formats',
        hypothesis: 'Better price presentation will increase conversions'
      }
    });
  {% endif %}
</script>

{% comment %} Integration with existing theme components {% endcomment %}
<script>
  // Integrate A/B testing with theme events
  document.addEventListener('DOMContentLoaded', function() {
    // Mark returning visitors
    if (document.cookie.indexOf('ab_user_id') !== -1) {
      document.cookie = 'returning_visitor=true;path=/;max-age=' + (30 * 24 * 60 * 60);
    }

    // Track product add to cart
    document.addEventListener('click', function(event) {
      if (event.target.matches('[data-product-form] button[type="submit"]')) {
        setTimeout(() => {
          // Dispatch custom event for A/B testing
          document.dispatchEvent(new CustomEvent('product:added-to-cart', {
            detail: {
              value: window.Shopify?.currency?.rate || 1
            }
          }));
        }, 100);
      }
    });
  });
</script>