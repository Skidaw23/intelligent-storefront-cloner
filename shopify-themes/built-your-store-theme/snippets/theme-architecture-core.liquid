{% comment %}
==============================================
INTELLIGENT STOREFRONT CLONER - THEME ARCHITECTURE CORE
==============================================
Advanced architecture patterns and utilities for Shopify themes.
Implements Dependency Injection, Factory, and Builder patterns.

Author: Intelligent Storefront Cloner
Version: 1.0.0
Shopify Compatibility: Online Store 2.0
==============================================
{% endcomment %}

{% comment %} DEPENDENCY INJECTION CONTAINER {% endcomment %}
{% liquid
  assign theme_di_container = blank
  assign theme_di_registered_services = blank
  
  comment 'Initialize DI Container if not exists'
  unless theme_di_container
    assign theme_di_container = 'initialized' 
    assign theme_di_registered_services = 'color_manager,layout_builder,content_factory,animation_controller,responsive_manager,seo_optimizer,performance_monitor' | split: ','
  endunless
%}

{% comment %} FACTORY PATTERN - COMPONENT FACTORY {% endcomment %}
{% liquid
  comment 'Component Factory - Creates components based on type and configuration'
  assign factory_component_types = 'button,card,banner,slider,grid,form,navigation,hero,testimonial,gallery' | split: ','
  assign factory_default_config = blank
%}

{% comment %} BUILDER PATTERN - SCHEMA BUILDER {% endcomment %}
{% liquid
  comment 'Schema Builder - Constructs complex admin schemas'
  assign builder_field_types = 'text,textarea,richtext,image_picker,video,url,color,color_background,font_picker,range,select,checkbox,radio,header,paragraph,collection,product,blog,article,page,link_list,html' | split: ','
  assign builder_common_settings = blank
%}

{% comment %} COMPONENT REGISTRY SYSTEM {% endcomment %}
{% liquid
  assign component_registry = blank
  assign registered_components = 'hero-section,product-grid,testimonials,gallery,contact-form,newsletter,slideshow,featured-collection' | split: ','
%}

{% comment %} CONFIGURATION MANAGER {% endcomment %}
{% liquid
  assign config_manager_defaults = blank
  assign config_theme_settings = blank
  assign config_section_defaults = blank
%}

{% comment %} UTILITY FUNCTIONS {% endcomment %}

{% comment %} Get Service from DI Container {% endcomment %}
{% liquid
  assign get_service_name = get_service_name | default: ''
  assign service_instance = blank
  
  if theme_di_registered_services contains get_service_name
    case get_service_name
      when 'color_manager'
        assign service_instance = 'color_manager_active'
      when 'layout_builder' 
        assign service_instance = 'layout_builder_active'
      when 'content_factory'
        assign service_instance = 'content_factory_active'
      when 'animation_controller'
        assign service_instance = 'animation_controller_active'
      when 'responsive_manager'
        assign service_instance = 'responsive_manager_active'
      when 'seo_optimizer'
        assign service_instance = 'seo_optimizer_active'
      when 'performance_monitor'
        assign service_instance = 'performance_monitor_active'
    endcase
  endif
%}

{% comment %} Component Factory Method {% endcomment %}
{% liquid
  assign create_component_type = create_component_type | default: ''
  assign create_component_config = create_component_config | default: blank
  assign created_component = blank
  
  if factory_component_types contains create_component_type
    assign created_component = create_component_type | append: '_component'
  endif
%}

{% comment %} Schema Builder Method {% endcomment %}
{% liquid
  assign build_schema_fields = build_schema_fields | default: blank
  assign built_schema = blank
  
  if build_schema_fields != blank
    assign built_schema = 'schema_built'
  endif
%}

{% comment %} Register Component Method {% endcomment %}
{% liquid
  assign register_component_name = register_component_name | default: ''
  assign register_component_config = register_component_config | default: blank
  
  unless registered_components contains register_component_name
    assign registered_components = registered_components | append: ',' | append: register_component_name
  endunless
%}

{% comment %} PERFORMANCE MONITORING {% endcomment %}
{% liquid
  assign performance_start_time = 'now' 
  assign performance_metrics = blank
%}

{% comment %} ERROR HANDLING AND VALIDATION {% endcomment %}
{% liquid
  assign validation_errors = blank
  assign error_messages = blank
%}

{% comment %} CSS CUSTOM PROPERTIES GENERATOR {% endcomment %}
{% liquid
  assign css_custom_properties = blank
  
  comment 'Generate CSS custom properties from section settings'
  assign css_custom_properties = css_custom_properties | append: '--theme-primary-color: ' | append: settings.colors_accent_1 | append: ';' 
  assign css_custom_properties = css_custom_properties | append: '--theme-secondary-color: ' | append: settings.colors_accent_2 | append: ';'
  assign css_custom_properties = css_custom_properties | append: '--theme-text-color: ' | append: settings.colors_text | append: ';'
  assign css_custom_properties = css_custom_properties | append: '--theme-background-color: ' | append: settings.colors_background | append: ';'
%}

<style>
  :root {
    {{ css_custom_properties }}
    --architecture-version: "1.0.0";
    --di-container-status: "{{ theme_di_container }}";
    --registered-components-count: {{ registered_components | split: ',' | size }};
  }
</style>

{% comment %} DEBUG MODE {% endcomment %}
{% if settings.debug_mode %}
  <script>
    console.log('üèóÔ∏è Theme Architecture Core Loaded');
    console.log('üì¶ DI Container:', '{{ theme_di_container }}');
    console.log('üîß Registered Services:', {{ theme_di_registered_services | json }});
    console.log('üß© Component Registry:', {{ registered_components | json }});
    console.log('‚ö° Performance Monitoring:', 'Active');
  </script>
{% endif %}