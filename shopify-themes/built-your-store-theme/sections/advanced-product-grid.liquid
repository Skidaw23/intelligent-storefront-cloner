{% comment %}
==============================================
INTELLIGENT STOREFRONT CLONER - ADVANCED PRODUCT GRID
==============================================
Modern product grid with advanced architecture patterns.
Features intelligent layout, performance optimization, and extensive customization.

Features:
- Smart grid system with auto-responsive layout
- Advanced filtering and sorting
- Lazy loading with intersection observer
- Quick view functionality
- A11y compliant
- Analytics tracking
==============================================
{% endcomment %}

{% render 'theme-architecture-core' %}
{% render 'component-factory' %}
{% render 'responsive-manager' %}

{{ 'section-product-grid-advanced.css' | asset_url | stylesheet_tag }}

{% liquid
  comment 'Product Grid Configuration'
  assign collection = collections[section.settings.collection] | default: collections.all
  assign products_to_show = section.settings.products_to_show | default: 12
  assign grid_columns_desktop = section.settings.grid_columns_desktop | default: 4
  assign grid_columns_tablet = section.settings.grid_columns_tablet | default: 3
  assign grid_columns_mobile = section.settings.grid_columns_mobile | default: 2
  assign enable_filtering = section.settings.enable_filtering
  assign enable_sorting = section.settings.enable_sorting
  assign enable_quick_view = section.settings.enable_quick_view
  assign enable_wishlist = section.settings.enable_wishlist
  assign show_vendor = section.settings.show_vendor
  assign show_rating = section.settings.show_rating
  assign show_sale_badge = section.settings.show_sale_badge
  assign show_out_of_stock_badge = section.settings.show_out_of_stock_badge
  
  comment 'Performance and UX settings'
  assign enable_infinite_scroll = section.settings.enable_infinite_scroll
  assign animation_style = section.settings.animation_style | default: 'fade-in'
  assign card_hover_effect = section.settings.card_hover_effect | default: 'lift'
%}

{%- style -%}
  .section-{{ section.id }} {
    --product-grid-padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    --product-grid-padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
    --product-grid-columns-mobile: {{ grid_columns_mobile }};
    --product-grid-columns-tablet: {{ grid_columns_tablet }};
    --product-grid-columns-desktop: {{ grid_columns_desktop }};
    --product-grid-gap: {{ section.settings.grid_gap | default: 20 }}px;
    --product-card-border-radius: {{ section.settings.card_border_radius | default: 8 }}px;
    --product-card-shadow: {{ section.settings.card_shadow_strength | default: 2 }};
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }} {
      --product-grid-padding-top: {{ section.settings.padding_top }}px;
      --product-grid-padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }

  {% comment %} Custom color scheme {% endcomment %}
  {% if section.settings.color_scheme == 'custom' %}
    .section-{{ section.id }}.color-custom {
      --color-background: {{ section.settings.custom_background.red }}, {{ section.settings.custom_background.green }}, {{ section.settings.custom_background.blue }};
      --color-foreground: {{ section.settings.custom_text.red }}, {{ section.settings.custom_text.green }}, {{ section.settings.custom_text.blue }};
      --color-button: {{ section.settings.custom_button.red }}, {{ section.settings.custom_button.green }}, {{ section.settings.custom_button.blue }};
      --color-button-text: {{ section.settings.custom_button_text.red }}, {{ section.settings.custom_button_text.green }}, {{ section.settings.custom_button_text.blue }};
    }
  {% endif %}
{%- endstyle -%}

<section 
  class="advanced-product-grid section-{{ section.id }}-padding color-{{ section.settings.color_scheme }}"
  data-section-type="advanced-product-grid"
  data-section-id="{{ section.id }}"
  data-collection-id="{{ collection.id }}"
  data-animation="{{ animation_style }}"
  {% if section.settings.section_anchor != blank %}id="{{ section.settings.section_anchor }}"{% endif %}
>
  <div class="container container--{{ section.settings.container_width }}">
    
    {% comment %} Section Header {% endcomment %}
    {% if section.settings.heading != blank or section.settings.description != blank %}
      <div class="product-grid__header" data-aos="{{ animation_style }}" data-aos-delay="100">
        {% if section.settings.eyebrow_text != blank %}
          <div class="product-grid__eyebrow">{{ section.settings.eyebrow_text }}</div>
        {% endif %}
        
        {% if section.settings.heading != blank %}
          <{{ section.settings.heading_tag | default: 'h2' }} class="product-grid__heading">
            {{ section.settings.heading }}
          </{{ section.settings.heading_tag | default: 'h2' }}>
        {% endif %}
        
        {% if section.settings.description != blank %}
          <div class="product-grid__description rte">{{ section.settings.description }}</div>
        {% endif %}
      </div>
    {% endif %}

    {% comment %} Filter and Sort Controls {% endcomment %}
    {% if enable_filtering or enable_sorting %}
      <div class="product-grid__controls" data-aos="{{ animation_style }}" data-aos-delay="200">
        {% if enable_filtering %}
          <div class="product-grid__filters">
            <label for="product-filter-{{ section.id }}" class="product-grid__filter-label">
              {{ 'collections.general.filter_by' | t | default: 'Filter by' }}:
            </label>
            <select 
              id="product-filter-{{ section.id }}" 
              class="product-grid__filter-select"
              data-filter-control
            >
              <option value="">{{ 'collections.general.all_products' | t | default: 'All Products' }}</option>
              {% for tag in collection.all_tags %}
                <option value="{{ tag | handle }}">{{ tag }}</option>
              {% endfor %}
            </select>
          </div>
        {% endif %}

        {% if enable_sorting %}
          <div class="product-grid__sorting">
            <label for="product-sort-{{ section.id }}" class="product-grid__sort-label">
              {{ 'collections.general.sort_by' | t | default: 'Sort by' }}:
            </label>
            <select 
              id="product-sort-{{ section.id }}" 
              class="product-grid__sort-select"
              data-sort-control
            >
              <option value="manual">{{ 'collections.general.featured' | t | default: 'Featured' }}</option>
              <option value="best-selling">{{ 'collections.general.best_selling' | t | default: 'Best Selling' }}</option>
              <option value="title-ascending">{{ 'collections.general.alphabetically_a_z' | t | default: 'A-Z' }}</option>
              <option value="title-descending">{{ 'collections.general.alphabetically_z_a' | t | default: 'Z-A' }}</option>
              <option value="price-ascending">{{ 'collections.general.price_low_high' | t | default: 'Price: Low to High' }}</option>
              <option value="price-descending">{{ 'collections.general.price_high_low' | t | default: 'Price: High to Low' }}</option>
              <option value="created-descending">{{ 'collections.general.date_new_old' | t | default: 'Date: New to Old' }}</option>
            </select>
          </div>
        {% endif %}
      </div>
    {% endif %}

    {% comment %} Product Grid Container {% endcomment %}
    <div 
      class="product-grid__container grid grid--{{ grid_columns_desktop }}-cols grid--responsive"
      data-grid-container
      data-hover-effect="{{ card_hover_effect }}"
    >
      {% liquid
        comment 'Get products with pagination support'
        if enable_infinite_scroll
          assign products_limit = products_to_show | times: 2
        else
          assign products_limit = products_to_show
        endif
        
        assign products = collection.products | limit: products_limit
      %}

      {% for product in products %}
        {% liquid
          comment 'Product Card Factory Configuration'
          assign card_factory_variant = 'product'
          assign card_factory_elevation = section.settings.card_elevation | default: 'md'
          assign card_factory_interactive = true
          assign card_factory_classes = 'product-card'
          
          comment 'Calculate delays for staggered animations'
          assign animation_delay = forloop.index0 | times: 50 | plus: 300
          if animation_delay > 1000
            assign animation_delay = 300 | plus: forloop.index0 | modulo: 8 | times: 50
          endif
        %}
        
        <article 
          class="{{ card_classes }} product-grid__item"
          data-product-id="{{ product.id }}"
          data-product-handle="{{ product.handle }}"
          data-aos="{{ animation_style }}" 
          data-aos-delay="{{ animation_delay }}"
          {% if product.tags.size > 0 %}data-product-tags="{{ product.tags | join: ',' | handle }}"{% endif %}
        >
          {% comment %} Product Image {% endcomment %}
          <div class="product-card__media">
            {% if product.featured_media %}
              {% liquid
                comment 'Responsive image setup'
                assign image_factory_aspect_ratio = section.settings.image_aspect_ratio | default: 'square'
                assign image_factory_lazy_loading = true
                assign image_factory_responsive = true
                assign image_factory_classes = 'product-card__image'
              %}
              <a href="{{ product.url }}" aria-label="{{ product.title | escape }}" tabindex="-1">
                <picture class="{{ image_classes }}">
                  <source media="(max-width: 749px)" srcset="{{ product.featured_media | image_url: width: 400 }} 400w, {{ product.featured_media | image_url: width: 600 }} 600w">
                  <source media="(min-width: 750px)" srcset="{{ product.featured_media | image_url: width: 300 }} 300w, {{ product.featured_media | image_url: width: 500 }} 500w, {{ product.featured_media | image_url: width: 700 }} 700w">
                  <img 
                    src="{{ product.featured_media | image_url: width: 400 }}"
                    alt="{{ product.featured_media.alt | default: product.title | escape }}"
                    width="{{ product.featured_media.width }}"
                    height="{{ product.featured_media.height }}"
                    loading="lazy"
                    sizes="(max-width: 749px) 50vw, (max-width: 1023px) 33vw, 25vw"
                  >
                </picture>
              </a>

              {% comment %} Hover Image {% endcomment %}
              {% if section.settings.show_second_image and product.media.size > 1 %}
                <picture class="product-card__image product-card__image--hover">
                  <img 
                    src="{{ product.media[1] | image_url: width: 400 }}"
                    alt="{{ product.media[1].alt | default: product.title | escape }}"
                    loading="lazy"
                  >
                </picture>
              {% endif %}
            {% else %}
              <div class="product-card__placeholder">
                {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg' }}
              </div>
            {% endif %}

            {% comment %} Product Badges {% endcomment %}
            <div class="product-card__badges">
              {% if show_sale_badge and product.compare_at_price > product.price %}
                <span class="product-badge product-badge--sale">
                  {% if section.settings.sale_badge_text != blank %}
                    {{ section.settings.sale_badge_text }}
                  {% else %}
                    {{ 'products.product.sale' | t | default: 'Sale' }}
                  {% endif %}
                </span>
              {% endif %}
              
              {% if show_out_of_stock_badge and product.available == false %}
                <span class="product-badge product-badge--sold-out">
                  {{ 'products.product.sold_out' | t | default: 'Sold Out' }}
                </span>
              {% endif %}

              {% if section.settings.show_new_badge %}
                {% assign days_old = 'now' | date: '%s' | minus: product.created_at | date: '%s' | divided_by: 86400 %}
                {% if days_old <= section.settings.new_badge_days %}
                  <span class="product-badge product-badge--new">
                    {{ 'products.product.new' | t | default: 'New' }}
                  </span>
                {% endif %}
              {% endif %}
            </div>

            {% comment %} Quick Actions {% endcomment %}
            <div class="product-card__quick-actions">
              {% if enable_quick_view %}
                <button 
                  type="button" 
                  class="product-card__quick-view btn btn--ghost btn--sm"
                  data-product-quick-view="{{ product.handle }}"
                  aria-label="{{ 'products.product.quick_view' | t | default: 'Quick view' }} {{ product.title | escape }}"
                >
                  {% render 'icon', icon: 'eye' %}
                </button>
              {% endif %}

              {% if enable_wishlist %}
                <button 
                  type="button" 
                  class="product-card__wishlist btn btn--ghost btn--sm"
                  data-product-wishlist="{{ product.id }}"
                  aria-label="{{ 'products.product.add_to_wishlist' | t | default: 'Add to wishlist' }} {{ product.title | escape }}"
                >
                  {% render 'icon', icon: 'heart' %}
                </button>
              {% endif %}
            </div>
          </div>

          {% comment %} Product Information {% endcomment %}
          <div class="product-card__content">
            {% if show_vendor and product.vendor != blank %}
              <div class="product-card__vendor">{{ product.vendor }}</div>
            {% endif %}

            <h3 class="product-card__title">
              <a href="{{ product.url }}" class="product-card__title-link">
                {{ product.title }}
              </a>
            </h3>

            {% if show_rating and product.metafields.reviews.rating.value != blank %}
              <div class="product-card__rating">
                {% render 'product-rating', rating: product.metafields.reviews.rating.value %}
              </div>
            {% endif %}

            {% comment %} Price using Component Factory {% endcomment %}
            <div class="product-card__price">
              {% render 'price', product: product, use_variant: false, price_class: 'price--large' %}
            </div>

            {% if section.settings.show_description and product.description != blank %}
              <div class="product-card__description">
                {{ product.description | strip_html | truncate: 100 }}
              </div>
            {% endif %}

            {% comment %} Add to Cart Button {% endcomment %}
            {% if section.settings.show_add_to_cart %}
              {% liquid
                assign button_factory_type = 'primary'
                assign button_factory_size = 'sm'
                assign button_factory_full_width = true
                assign button_factory_classes = 'product-card__add-to-cart'
                
                if product.available
                  assign button_factory_text = 'products.product.add_to_cart' | t | default: 'Add to cart'
                  assign button_factory_disabled = false
                else
                  assign button_factory_text = 'products.product.sold_out' | t | default: 'Sold out'
                  assign button_factory_disabled = true
                endif
              %}
              <button 
                type="button"
                class="{{ button_classes }}"
                data-product-form="{{ product.id }}"
                {% unless product.available %}disabled{% endunless %}
              >
                {{ button_factory_text }}
              </button>
            {% endif %}
          </div>
        </article>
      {% else %}
        <div class="product-grid__empty">
          <p>{{ 'collections.general.no_matches' | t | default: 'No products found' }}</p>
        </div>
      {% endfor %}
    </div>

    {% comment %} Load More Button {% endcomment %}
    {% if enable_infinite_scroll == false and collection.products_count > products_to_show %}
      <div class="product-grid__load-more" data-aos="{{ animation_style }}" data-aos-delay="600">
        {% liquid
          assign button_factory_type = 'secondary'
          assign button_factory_size = 'lg'
          assign button_factory_text = 'collections.general.load_more' | t | default: 'Load More'
          assign button_factory_classes = 'product-grid__load-more-btn'
        %}
        <button 
          type="button"
          class="{{ button_classes }}"
          data-load-more
          data-products-loaded="{{ products_to_show }}"
          data-total-products="{{ collection.products_count }}"
        >
          {{ button_factory_text }}
        </button>
      </div>
    {% endif %}

    {% comment %} Collection CTA {% endcomment %}
    {% if section.settings.cta_text != blank and section.settings.cta_url != blank %}
      <div class="product-grid__cta" data-aos="{{ animation_style }}" data-aos-delay="700">
        {% liquid
          assign button_factory_type = section.settings.cta_style | default: 'primary'
          assign button_factory_size = 'lg'
          assign button_factory_text = section.settings.cta_text
          assign button_factory_url = section.settings.cta_url
          assign button_factory_classes = 'product-grid__cta-btn'
        %}
        <a href="{{ button_factory_url }}" class="{{ button_classes }}">
          {{ button_factory_text }}
        </a>
      </div>
    {% endif %}
  </div>
</section>

{% comment %} Advanced JavaScript Functionality {% endcomment %}
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const productGrid = document.querySelector('[data-section-id="{{ section.id }}"]');
    if (!productGrid) return;

    // Initialize Advanced Product Grid
    class AdvancedProductGrid {
      constructor(container) {
        this.container = container;
        this.sectionId = container.dataset.sectionId;
        this.collectionId = container.dataset.collectionId;
        this.gridContainer = container.querySelector('[data-grid-container]');
        this.filterControl = container.querySelector('[data-filter-control]');
        this.sortControl = container.querySelector('[data-sort-control]');
        this.loadMoreBtn = container.querySelector('[data-load-more]');
        
        this.init();
      }

      init() {
        this.setupEventListeners();
        this.initLazyLoading();
        
        {% if enable_infinite_scroll %}
          this.initInfiniteScroll();
        {% endif %}

        {% if settings.log_performance_metrics %}
          this.logPerformanceMetrics();
        {% endif %}
      }

      setupEventListeners() {
        // Filter control
        if (this.filterControl) {
          this.filterControl.addEventListener('change', (e) => {
            this.filterProducts(e.target.value);
          });
        }

        // Sort control
        if (this.sortControl) {
          this.sortControl.addEventListener('change', (e) => {
            this.sortProducts(e.target.value);
          });
        }

        // Load more button
        if (this.loadMoreBtn) {
          this.loadMoreBtn.addEventListener('click', () => {
            this.loadMoreProducts();
          });
        }

        // Quick view buttons
        this.container.addEventListener('click', (e) => {
          if (e.target.closest('[data-product-quick-view]')) {
            const productHandle = e.target.closest('[data-product-quick-view]').dataset.productQuickView;
            this.openQuickView(productHandle);
          }
        });

        // Wishlist buttons
        this.container.addEventListener('click', (e) => {
          if (e.target.closest('[data-product-wishlist]')) {
            const productId = e.target.closest('[data-product-wishlist]').dataset.productWishlist;
            this.toggleWishlist(productId);
          }
        });
      }

      initLazyLoading() {
        if ('IntersectionObserver' in window) {
          const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const img = entry.target;
                if (img.dataset.src) {
                  img.src = img.dataset.src;
                  img.classList.remove('loading');
                  imageObserver.unobserve(img);
                }
              }
            });
          });

          this.container.querySelectorAll('img[data-src]').forEach(img => {
            imageObserver.observe(img);
          });
        }
      }

      {% if enable_infinite_scroll %}
      initInfiniteScroll() {
        if ('IntersectionObserver' in window) {
          const loadTrigger = document.createElement('div');
          loadTrigger.className = 'load-trigger';
          this.gridContainer.appendChild(loadTrigger);

          const scrollObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                this.loadMoreProducts();
              }
            });
          }, { rootMargin: '100px' });

          scrollObserver.observe(loadTrigger);
        }
      }
      {% endif %}

      filterProducts(filterValue) {
        const products = this.gridContainer.querySelectorAll('.product-grid__item');
        
        products.forEach(product => {
          const productTags = product.dataset.productTags || '';
          const shouldShow = !filterValue || productTags.includes(filterValue);
          
          product.style.display = shouldShow ? 'block' : 'none';
          
          if (shouldShow) {
            product.classList.add('animate-in');
          }
        });

        this.trackEvent('filter_products', { filter: filterValue });
      }

      sortProducts(sortValue) {
        const products = Array.from(this.gridContainer.querySelectorAll('.product-grid__item'));
        
        products.sort((a, b) => {
          switch (sortValue) {
            case 'title-ascending':
              return a.querySelector('.product-card__title').textContent.localeCompare(
                b.querySelector('.product-card__title').textContent
              );
            case 'title-descending':
              return b.querySelector('.product-card__title').textContent.localeCompare(
                a.querySelector('.product-card__title').textContent
              );
            case 'price-ascending':
              return this.getProductPrice(a) - this.getProductPrice(b);
            case 'price-descending':
              return this.getProductPrice(b) - this.getProductPrice(a);
            default:
              return 0;
          }
        });

        products.forEach(product => this.gridContainer.appendChild(product));
        this.trackEvent('sort_products', { sort: sortValue });
      }

      getProductPrice(productEl) {
        const priceEl = productEl.querySelector('.price__current .money');
        return priceEl ? parseFloat(priceEl.textContent.replace(/[^0-9.-]+/g, '')) : 0;
      }

      async loadMoreProducts() {
        if (this.loadMoreBtn) {
          this.loadMoreBtn.classList.add('loading');
          this.loadMoreBtn.textContent = 'Loading...';
        }

        try {
          // Implementation would fetch more products via AJAX
          // This is a simplified version
          this.trackEvent('load_more_products');
        } catch (error) {
          console.error('Error loading more products:', error);
        } finally {
          if (this.loadMoreBtn) {
            this.loadMoreBtn.classList.remove('loading');
            this.loadMoreBtn.textContent = 'Load More';
          }
        }
      }

      openQuickView(productHandle) {
        // Implementation for quick view modal
        this.trackEvent('quick_view_opened', { product: productHandle });
      }

      toggleWishlist(productId) {
        // Implementation for wishlist functionality
        this.trackEvent('wishlist_toggled', { product_id: productId });
      }

      trackEvent(eventName, parameters = {}) {
        if (typeof gtag !== 'undefined') {
          gtag('event', eventName, {
            event_category: 'Product Grid',
            ...parameters
          });
        }
      }

      logPerformanceMetrics() {
        if ('PerformanceObserver' in window) {
          const observer = new PerformanceObserver((list) => {
            for (const entry of list.getEntries()) {
              console.log(`Product Grid Performance - ${entry.name}: ${entry.duration}ms`);
            }
          });
          observer.observe({ entryTypes: ['navigation', 'resource'] });
        }
      }
    }

    new AdvancedProductGrid(productGrid);

    {% if settings.debug_mode %}
      console.log('🛍️ Advanced Product Grid Loaded');
      console.log('📦 Collection:', '{{ collection.handle }}');
      console.log('🎯 Products Count:', {{ collection.products_count }});
      console.log('🎨 Animation Style:', '{{ animation_style }}');
    {% endif %}
  });
</script>

{% schema %}
{
  "name": "🛍️ Advanced Product Grid",
  "tag": "section",
  "class": "section-product-grid-advanced",
  "settings": [
    {
      "type": "header",
      "content": "📦 Collection & Products"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection",
      "default": "all"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "label": "Products to Show",
      "min": 4,
      "max": 36,
      "step": 4,
      "default": 12,
      "info": "Number of products to display initially"
    },
    {
      "type": "checkbox",
      "id": "enable_infinite_scroll",
      "label": "Enable Infinite Scroll",
      "default": false,
      "info": "Automatically load more products when scrolling"
    },
    {
      "type": "header",
      "content": "📐 Grid Layout"
    },
    {
      "type": "range",
      "id": "grid_columns_desktop",
      "label": "Desktop Columns",
      "min": 2,
      "max": 6,
      "step": 1,
      "default": 4
    },
    {
      "type": "range",
      "id": "grid_columns_tablet",
      "label": "Tablet Columns",
      "min": 2,
      "max": 4,
      "step": 1,
      "default": 3
    },
    {
      "type": "range",
      "id": "grid_columns_mobile",
      "label": "Mobile Columns",
      "min": 1,
      "max": 3,
      "step": 1,
      "default": 2
    },
    {
      "type": "range",
      "id": "grid_gap",
      "label": "Grid Gap",
      "min": 10,
      "max": 50,
      "step": 5,
      "unit": "px",
      "default": 20
    },
    {
      "type": "header",
      "content": "✏️ Content"
    },
    {
      "type": "text",
      "id": "eyebrow_text",
      "label": "Eyebrow Text",
      "placeholder": "FEATURED PRODUCTS"
    },
    {
      "type": "richtext",
      "id": "heading",
      "label": "Heading",
      "default": "<p>Featured Products</p>"
    },
    {
      "type": "select",
      "id": "heading_tag",
      "label": "Heading HTML Tag",
      "options": [
        { "value": "h1", "label": "H1" },
        { "value": "h2", "label": "H2" },
        { "value": "h3", "label": "H3" },
        { "value": "div", "label": "DIV" }
      ],
      "default": "h2"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "Description"
    },
    {
      "type": "header",
      "content": "🎯 Product Display"
    },
    {
      "type": "select",
      "id": "image_aspect_ratio",
      "label": "Product Image Aspect Ratio",
      "options": [
        { "value": "auto", "label": "Natural" },
        { "value": "square", "label": "Square (1:1)" },
        { "value": "portrait", "label": "Portrait (4:5)" },
        { "value": "landscape", "label": "Landscape (16:9)" }
      ],
      "default": "square"
    },
    {
      "type": "checkbox",
      "id": "show_second_image",
      "label": "Show Second Image on Hover",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "Show Product Vendor",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "label": "Show Product Rating",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_description",
      "label": "Show Product Description",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_add_to_cart",
      "label": "Show Add to Cart Button",
      "default": true
    },
    {
      "type": "header",
      "content": "🏷️ Badges & Labels"
    },
    {
      "type": "checkbox",
      "id": "show_sale_badge",
      "label": "Show Sale Badge",
      "default": true
    },
    {
      "type": "text",
      "id": "sale_badge_text",
      "label": "Sale Badge Text",
      "default": "Sale",
      "info": "Leave empty to use default translation"
    },
    {
      "type": "checkbox",
      "id": "show_out_of_stock_badge",
      "label": "Show Out of Stock Badge",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_new_badge",
      "label": "Show New Product Badge",
      "default": false
    },
    {
      "type": "range",
      "id": "new_badge_days",
      "label": "Days to Show New Badge",
      "min": 7,
      "max": 60,
      "step": 7,
      "unit": "days",
      "default": 30
    },
    {
      "type": "header",
      "content": "🔧 Features & Functionality"
    },
    {
      "type": "checkbox",
      "id": "enable_filtering",
      "label": "Enable Product Filtering",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_sorting",
      "label": "Enable Product Sorting",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_quick_view",
      "label": "Enable Quick View",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_wishlist",
      "label": "Enable Wishlist",
      "default": false
    },
    {
      "type": "header",
      "content": "🎨 Design & Styling"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "Color Scheme",
      "default": "scheme-1"
    },
    {
      "type": "select",
      "id": "container_width",
      "label": "Container Width",
      "options": [
        { "value": "narrow", "label": "Narrow" },
        { "value": "standard", "label": "Standard" },
        { "value": "wide", "label": "Wide" },
        { "value": "fluid", "label": "Full Width" }
      ],
      "default": "standard"
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "label": "Card Border Radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "default": 8
    },
    {
      "type": "range",
      "id": "card_shadow_strength",
      "label": "Card Shadow Strength",
      "min": 0,
      "max": 5,
      "step": 1,
      "default": 2
    },
    {
      "type": "select",
      "id": "card_hover_effect",
      "label": "Card Hover Effect",
      "options": [
        { "value": "none", "label": "None" },
        { "value": "lift", "label": "Lift" },
        { "value": "zoom", "label": "Zoom" },
        { "value": "fade", "label": "Fade" }
      ],
      "default": "lift"
    },
    {
      "type": "header",
      "content": "🎭 Animations"
    },
    {
      "type": "select",
      "id": "animation_style",
      "label": "Entrance Animation",
      "options": [
        { "value": "none", "label": "None" },
        { "value": "fade-in", "label": "Fade In" },
        { "value": "slide-up", "label": "Slide Up" },
        { "value": "zoom-in", "label": "Zoom In" },
        { "value": "flip-up", "label": "Flip Up" }
      ],
      "default": "fade-in"
    },
    {
      "type": "header",
      "content": "🔗 Call to Action"
    },
    {
      "type": "text",
      "id": "cta_text",
      "label": "CTA Button Text"
    },
    {
      "type": "url",
      "id": "cta_url",
      "label": "CTA Button Link"
    },
    {
      "type": "select",
      "id": "cta_style",
      "label": "CTA Button Style",
      "options": [
        { "value": "primary", "label": "Primary" },
        { "value": "secondary", "label": "Secondary" },
        { "value": "outline", "label": "Outline" }
      ],
      "default": "primary"
    },
    {
      "type": "header",
      "content": "📱 Responsive & Spacing"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 200,
      "step": 4,
      "unit": "px",
      "label": "Top Padding",
      "default": 60
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 200,
      "step": 4,
      "unit": "px",
      "label": "Bottom Padding",
      "default": 60
    },
    {
      "type": "header",
      "content": "⚙️ Advanced Settings"
    },
    {
      "type": "text",
      "id": "section_anchor",
      "label": "Section Anchor ID"
    }
  ],
  "presets": [
    {
      "name": "🛍️ Advanced Product Grid",
      "settings": {
        "collection": "all",
        "products_to_show": 12,
        "heading": "<p>Featured Products</p>",
        "enable_filtering": true,
        "enable_sorting": true,
        "enable_quick_view": true
      }
    }
  ]
}
{% endschema %}